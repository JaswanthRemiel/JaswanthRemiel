1A) FLASH LED
void setup() {
pinMode(16, OUTPUT);
pinMode(5,OUTPUT);
pinMode(4,OUTPUT);
pinMode(0,OUTPUT);
}
void loop() {
for(int i=0;i<=255;i+=5)
{
analogWrite(16,i);
analogWrite(5,i);
analogWrite(4,i);
analogWrite(0,i);
delay(50);
}
for(int i=255;i>=0;i-=5)
{
analogWrite(16,i);
analogWrite(5,i);
analogWrite(4,i);
analogWrite(0,i);
delay(50);
}
}


1B) FADING LED
void setup() {
pinMode(16, OUTPUT);
pinMode(5, OUTPUT);
pinMode(4, OUTPUT);
pinMode(0, OUTPUT);
}
void loop() {
for(int i=0; i<255;i+=5)
{
analogWrite(16,i);
delay(50);
}
for(int j=0; j<255;j+=5)
{
analogWrite(4,j);
delay(50);
for(int k=0; k<255;k+=5)
{
analogWrite(5,k);
delay(50);
}
for(int l=0; l<255;l+=5)
{
analogWrite(0,l);
delay(50);
}
for(int i=255; i>0;i-=5)
{
analogWrite(16,i);
delay(50);
}
for(int j=255; j>0;j-=5)
{
analogWrite(4,j);
delay(50);
}
for(int k=255; k>0;k-=5)
{
analogWrite(5,k);
delay(50);
}
for(int l=255; l>0;l-=5)
{
analogWrite(0,l);
delay(50);
}
}
}


1c) ODD EVEN int led1 = 16; int led2 = 5; int led3 = 4; int led4 = 0; int alpha[4] = {16,5,4,0}; void setup() { pinMode(led1,OUTPUT); pinMode(led2,OUTPUT); pinMode(led3,OUTPUT); pinMode(led4,OUTPUT); } void loop() { digitalWrite(led1,HIGH); digitalWrite(led2,HIGH); digitalWrite(led3,HIGH); digitalWrite(led4,HIGH); delay(1000); digitalWrite(led1,LOW); digitalWrite(led2,LOW); digitalWrite(led3,LOW); digitalWrite(led4,LOW); delay(1000); digitalWrite(led1,HIGH); digitalWrite(led2,LOW); digitalWrite(led3,HIGH); digitalWrite(led4,LOW); delay(1000); digitalWrite(led1,LOW); digitalWrite(led2,HIGH); digitalWrite(led3,LOW); digitalWrite(led4,HIGH);
delay(500); digitalWrite(led1,HIGH); digitalWrite(led2,LOW); digitalWrite(led3,LOW); digitalWrite(led4,LOW); delay(500); digitalWrite(led2,HIGH); digitalWrite(led1,LOW); digitalWrite(led3,LOW); digitalWrite(led4,LOW); delay(500); digitalWrite(led1,LOW); digitalWrite(led2,LOW); digitalWrite(led3,HIGH); digitalWrite(led4,LOW); delay(500); digitalWrite(led1,LOW); digitalWrite(led2,LOW); digitalWrite(led3,LOW); digitalWrite(led4,HIGH); delay(500); }


2)LED CONTROL
#include <ESP8266WiFi.h>
const char* ssid = "Redmi 10A";
const char* password = "12345678";
int LED = 2; // led connected to GPIO2 (D4)
WiFiServer server(80);
void setup()
{
Serial.begin(115200); //Default Baudrate
pinMode(LED, OUTPUT);
digitalWrite(LED, LOW);
Serial.print("Connecting to the Newtork");
WiFi.begin(ssid, password);
while (WiFi.status() != WL_CONNECTED)
{
delay(500);
Serial.print(".");
}
Serial.println("WiFi connected");
server.begin(); // Starts the Server
Serial.println("Server started");
Serial.print("IP Address of network: ");
Serial.println(WiFi.localIP());
Serial.print("Copy and paste the following URL: https://");
Serial.print(WiFi.localIP());
Serial.println("/");
}
void loop()
{
WiFiClient client = server.available();
if (!client)
{
return;
}
Serial.println("Waiting for new client");
while(!client.available())
{
delay(1);
}
String request = client.readStringUntil('\r');
Serial.println(request);
client.flush();
int value = LOW;
if(request.indexOf("/LED=ON") != -1)
{
digitalWrite(LED, HIGH);
value = HIGH;
}
if(request.indexOf("/LED=OFF") != -1)
{
digitalWrite(LED, LOW);
value = LOW;
}
//*------------------HTML Page Code---------------------*//
client.println("HTTP/1.1 200 OK");
client.println("Content-Type: text/html");
client.println("");
client.println("<!DOCTYPE HTML>");
client.println("<html>");
client.print(" CONTROL LED: ");
if(value == HIGH)
{
client.print("ON");
}
else
{
client.print("OFF");
}
client.println("<br><br>");
client.println("<a href=\"/LED=ON\"\"><button>ON</button></a>");
client.println("<a href=\"/LED=OFF\"\"><button>OFF</button></a><br />");
client.println("</html>");
delay(1);
Serial.println("Client disonnected");
Serial.println("");
}
3)DHT-11
#include <DHT.h>
#include <ESP8266WiFi.h>
#define DHTPIN 2 //DHT11 is connected to GPIO Pin 2
String apiKey = "Z5O6H2UCQT3SUHUX";
const char* ssid = "SSID";
const char* pass = "PASSWORD";
const char* server = "api.thingspeak.com";
float humi;
float temp;
DHT dht(DHTPIN, DHT11);
WiFiClient client;
void setup()
{
Serial.begin(115200);
delay(10);
dht.begin();
Serial.println("Connecting to ");
Serial.println(ssid);
WiFi.begin(ssid, pass);
while (WiFi.status() != WL_CONNECTED)
{
delay(100);
Serial.print("*");
}
Serial.println("");
Serial.println("***WiFi connected***");
}
void loop()
{
humi = dht.readHumidity();
temp = dht.readTemperature();
if (client.connect(server,80))
{
String sendData = apiKey+"&field1="+String(temp)+"&field2="+String(humi)+"\r\n\r\n";
client.print("POST /update HTTP/1.1\n");
client.print("Host: api.thingspeak.com\n");
client.print("Connection: close\n");
client.print("X-THINGSPEAKAPIKEY: "+apiKey+"\n");
client.print("Content-Type: application/x-www-form-urlencoded\n");
client.print("Content-Length: ");
client.print(sendData.length());
client.print("\n\n");
client.print(sendData);
Serial.print("Temperature: ");
Serial.print(temp);
Serial.print("deg C. Humidity: ");
Serial.print(humi);
Serial.println("%. Connecting to Thingspeak.");
}
client.stop();
Serial.println("Sending....");
delay(10000);
}



4)ULTRASONIC
#define BLYNK_TEMPLATE_ID "TMPLqIMJ0dyh"
#define BLYNK_TEMPLATE_NAME "HCSR04"
#define BLYNK_AUTH_TOKEN "rDBnMsXezDdYepBHuQ4U3QfHzU-Q--v8"
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "IOTLAB";
char pass[] = "9790433328";
const int trigPin = 12;
const int echoPin = 14;
#define SOUND_VELOCITY 0.034
long duration;
float distanceCm;
BlynkTimer timer;
void myTimerEvent()
{
Blynk.virtualWrite(V0,distanceCm);
}
void setup()
{
Serial.begin(115200); // Starts the serial communication
pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
pinMode(echoPin, INPUT); // Sets the echoPin as an Input
Blynk.begin(auth, ssid, pass);
timer.setInterval(1000L, myTimerEvent);
}
void loop()
{
Blynk.run();
timer.run();
digitalWrite(trigPin, LOW);
delayMicroseconds(2);
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
duration = pulseIn(echoPin, HIGH);
distanceCm = duration * SOUND_VELOCITY/2;
Serial.print("Distance (cm): ");
Serial.println(distanceCm);
delay(1000);
}


5A) INTERNAL LED import machine import time led= machine.Pin('LED' , machine.Pin.OUT) while (True): led.on() time.sleep(0.5) led.off() time.sleep(0.5)
5B) EXTERNAL LED import time from machine import Pin led1=Pin(13,Pin.OUT) while True: led1.value(1) #Set led turn on time.sleep(0.1) led1.value(0) #Set led turn off time.sleep(0.1)
5C)PUSHBUTTON LED from machine import Pin from time import sleep led1 = Pin(14, Pin.OUT) push_button1 = Pin(13, Pin.IN) led2 = Pin(8, Pin.OUT) push_button2 = Pin(7, Pin.IN) while True: logic_state1 = push_button1.value()
logic_state2 = push_button2.value() if logic_state1 == True: led1.value(1) if logic_state2 == True: led2.value(1) if logic_state1 == False: led1.value(0) if logic_state2 == False: led2.value(0)
5D)RUNNING LED import time from machine import Pin led1=Pin(13,Pin.OUT) led2=Pin(14,Pin.OUT) led3=Pin(15,Pin.OUT) #create LED object from pin13,Set Pin13 to output while True: led1.value(1) #Set led turn on time.sleep(0.1) led1.value(0) #Set led turn off time.sleep(0.1) led2.value(1) #Set led turn on time.sleep(0.1) led2.value(0) #Set led turn off time.sleep(0.1) led3.value(1) #Set led turn on time.sleep(0.1) led3.value(0) #Set led turn off time.sleep(0.1)
6A) IR SERVO 90 from machine import Pin, PWM from time import sleep ir=Pin(3,Pin.IN) pwm = PWM(Pin(2)) pwm.freq(150) while True: if ir.value()==1: for duty in range(0): pwm.duty_u16(duty) print(duty) sleep(0.0001) elif ir.value()==0: for duty in range(14000): pwm.duty_u16(duty) print(duty) sleep(0.0001)
6B) IR SERVO 180 from machine import Pin, PWM from time import sleep ir=Pin(3,Pin.IN) pwm = PWM(Pin(2)) pwm.freq(150) while True: if ir.value()==1: for duty in range(0): pwm.duty_u16(duty) print(duty) sleep(0.0001) elif ir.value()==0: for duty in range(23000): pwm.duty_u16(duty) print(duty) sleep(0.0001)
